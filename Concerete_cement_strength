import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
# -----------------------------
# 1. Load dataset
# -----------------------------
# Dataset: https://archive.ics.uci.edu/ml/datasets/Concrete+Compressive+Strength
# Provided file: Concrete_Data.xlsx

#file_path = r"C:\Users\nidhi\Downloads\concrete+compressive+strength\Concrete_Data.xlsx"
df=pd.read_excel("Concrete_Data.xls")

print("Dataset shape:", df.shape)
print(df.head())
# Rename columns for easier handling
df.columns = ['cement', 'slag', 'fly_ash', 'water', 'superplasticizer', 'coarse_agg', 'fine_agg', 'age', 'strength']
df
# Histogram of target variable
plt.hist(df["strength"], bins=30, edgecolor="black")
plt.xlabel("Compressive Strength (MPa)")
plt.ylabel("Frequency")
plt.title("Distribution of Concrete Compressive Strength")
plt.show()
# Correlation heatmap
import seaborn as sns
plt.figure(figsize=(8,6))
#sns.heatmap(df.corr(), annot=False, cmap="coolwarm")
correlation_matrix = df.corr().round(2)
sns.heatmap(data=correlation_matrix, annot = True)
plt.title("Correlation Heatmap of Features")
plt.show()
# -----------------------------
# 3. Features and Target
# -----------------------------
X = df.drop(columns=["strength"])
y = df["strength"]


# -----------------------------
# 4. Train/Test Split
# -----------------------------
X_train, X_test, y_train, y_test = train_test_split(
X, y, test_size=0.2, random_state=42
)


print("Training set size:", X_train.shape[0])
print("Test set size:", X_test.shape[0])
# -----------------------------
# 5. Baseline Linear Regression Model
# -----------------------------
model = LinearRegression()
model.fit(X_train, y_train)


# Predictions
y_pred = model.predict(X_test)


# Evaluation metrics
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)


print("RMSE:", rmse)
print("RÂ²:", r2)


# Scatter plot: actual vs predicted
plt.scatter(y_test, y_pred, alpha=0.6)
plt.xlabel("Actual Strength (MPa)")
plt.ylabel("Predicted Strength (MPa)")
plt.title("Concrete Strength Prediction: Actual vs Predicted")
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--') # perfect prediction line
plt.show()
